package conti.ies.carpark.service;

import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

@Log4j2
@Service
public class EncryptPasswordService implements PasswordEncoder {

    @Value("${security.password.algorithm}")
    String algorithm;

    @Value("${security.password.encryptionKey}")
    String encryptionKey;

    private byte[] encryptDecrypt(String str, int mode){
        byte [] text = str.getBytes();

        try{
            SecretKeySpec secretKey = new SecretKeySpec(encryptionKey.getBytes(StandardCharsets.UTF_8), algorithm);
            Cipher cipher = Cipher.getInstance(algorithm);
            cipher.init(mode, secretKey);
            return cipher.doFinal(text);
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }


    public String encryptEncode(String plainText) {
        //log.info(encryptDecrypt(plainText, Cipher.ENCRYPT_MODE));
        return new String(Base64.getEncoder().encode(encryptDecrypt(plainText, Cipher.ENCRYPT_MODE)));
    }

    @Override
    public String encode(CharSequence charSequence) {
        return encryptEncode(charSequence.toString());
    }

    @Override
    public boolean matches(CharSequence charSequence, String s) {
        return encryptEncode(charSequence.toString()).equals(s);
    }
}
